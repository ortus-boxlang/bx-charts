/**
 * BoxLang ChartData Component - Defines data points for chart series
 * <p>
 * This component must be nested within a chartSeries component.
 * It defines individual data points with labels and values.
 * <p>
 * Usage:
 * <pre>
 * <bx:chartdata item="Label" value="100">
 * </pre>
 */
@BoxComponent( "chartdata" )
@AllowsBody( false )
@RequiresBody( false )
class{

	/**
	 * --------------------------------------------------------------------------
	 * Injections
	 * --------------------------------------------------------------------------
	 */
	property name="moduleRecord";
	property name="boxRuntime";
	property name="functionService";
	property name="componentService";
	property name="interceptorService";
	property name="asyncService";
	property name="schedulerService";
	property name="datasourceService";
	property name="cacheService";
	property name="log";

	/**
	 * Defines a data point for a chart series
	 *
	 * @param context The context of the execution (IBoxContext)
	 * @param attributes The attributes of the component that were passed in
	 * @param body The body of the component (not used)
	 * @param executionState The execution state of the component
	 *
	 * @return A BodyResult instance or null for a default result return.
	 */
	function invoke( required context, Struct attributes, any body, Struct executionState ){
		// This component must be nested within a chartSeries component
		var parentState = context.findClosestComponent( "chartseries" );
		if ( isNull( parentState ) ) {
			throw( type: "BXChartException", message:"chartdata must be nested within a chartseries component" );
		}

		// Validate required attributes
		if ( !structKeyExists( attributes, "item" ) || !len( trim( attributes.item ) ) ) {
			throw( type: "BXChartException", message:"chartdata requires an 'item' attribute with the data label" );
		}

		// Check if this is a bubble chart (has x, y, r coordinates)
		var isBubbleChart = structKeyExists( attributes, "x" ) && structKeyExists( attributes, "y" ) && structKeyExists( attributes, "r" );

		// For non-bubble charts, value is required
		if ( !structKeyExists( attributes, "value" ) && !isBubbleChart ) {
			throw( type: "BXChartException", message:"chartdata requires a 'value' attribute (or x, y, r for bubble charts)" );
		}

		// Add this data point to the parent series
		var dataPoint = {
			"item": trim( attributes.item )
		};

		// Add value if provided
		if ( structKeyExists( attributes, "value" ) ) {
			dataPoint.value = attributes.value;
		}

		// For bubble charts, support optional x, y, r attributes
		if ( structKeyExists( attributes, "x" ) ) {
			dataPoint.x = attributes.x;
		}
		if ( structKeyExists( attributes, "y" ) ) {
			dataPoint.y = attributes.y;
		}
		if ( structKeyExists( attributes, "r" ) ) {
			dataPoint.r = attributes.r;
		}

		// Initialize chartData array if it doesn't exist
		if ( !structKeyExists( parentState, "chartData" ) ) {
			parentState.chartData = [];
		}

		arrayAppend( parentState.chartData, dataPoint );

		return null; // Default return
	}

}